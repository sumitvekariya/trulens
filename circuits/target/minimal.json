{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":6728525520872116145,"abi":{"parameters":[{"name":"verifier_image_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"min_timestamp_bound","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"max_timestamp_bound","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"min_latitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"max_latitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"min_longitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"max_longitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"signed_image_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"image_signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"latitude","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"longitude","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"gps_enabled_bool","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"ndjLTsMwEIXhd/G6i3jsGXv6Kgih0AuKVKVVmyKhqu9OCgQWCYtzlk7yrf6TjW9hu3u9vr10/f54CeunWzgcN+3QHfvxdAsx1a+Hl1PbP86XoT0PYZ1rXIVdvw1rlXhfhX132I1P/f68GonDJDc4iTgRnCScZJwoTgwnBSd4/YzXV7y+4vUVr694fcXrK15f8fqK11e8vuL1Da9veH3D6xte3/D6htc3vL7h9Q2vb3j9sli/RvshNdcZiTgRnCScLNavJhPxPCOKE8NJwcliffcpZWwWWjpuakOYSBghTCJMJowSxghTCEPsoBI7cGIHTuzAiR04sQNf3EFskv8i8xlSBhmDCoMqgxxH0jQMigwSBiUGZQYpg4xBhUGVQcwi4j+LqGVCMc5RZJAwKDEoM0gZZAwqDKoMcgIJswhhFiHMIoRZhDCLEGYRsryImP7Q/CeUwqDKICdQahgUGSQMSgzKDFIGMYtIzCISs4jELCIzi8jwIsbDe3vu2tfD7nFr+nh37TfTJep4HD5O32/Gbz8B","file_map":{"49":{"source":"fn main(\n    // Public inputs\n    verifier_image_hash: [u8; 32],\n    min_timestamp_bound: u64,\n    max_timestamp_bound: u64,\n    min_latitude_bound: i64,\n    max_latitude_bound: i64,\n    min_longitude_bound: i64,\n    max_longitude_bound: i64,\n    \n    // Private inputs\n    signed_image_hash: [u8; 32],\n    image_signature: [u8; 64],\n    timestamp: u64,\n    latitude: i64,\n    longitude: i64,\n    gps_enabled_bool: bool\n) {\n    // Always verify image hash and signature\n    assert(signed_image_hash == verifier_image_hash);\n    \n    // Simple check to use image_signature parameter (to prevent unused variable warning)\n    // In a real application, you would verify the signature\n    let _signature_len = image_signature.len();\n    assert(_signature_len == 64);\n    \n    // Always verify timestamp bounds\n    assert(timestamp >= min_timestamp_bound);\n    assert(timestamp <= max_timestamp_bound);\n    \n    // Only verify GPS bounds if GPS is enabled\n    if gps_enabled_bool {\n        assert(latitude >= min_latitude_bound);\n        assert(latitude <= max_latitude_bound);\n        assert(longitude >= min_longitude_bound);\n        assert(longitude <= max_longitude_bound);\n    }\n}\n\n#[test]\nfn test_main_with_gps() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let image_signature = [0; 64];\n    \n    // Test with GPS enabled\n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        150, // timestamp within bounds\n        15,  // latitude within bounds\n        35,  // longitude within bounds\n        true // GPS enabled\n    );\n}\n\n#[test]\nfn test_main_without_gps() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let image_signature = [0; 64];\n    \n    // Test with GPS disabled - latitude and longitude can be any values\n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        150, // timestamp within bounds\n        0,   // latitude doesn't matter\n        0,   // longitude doesn't matter\n        false // GPS disabled\n    );\n}\n","path":"/Users/sarkazein./Documents/Personal/Hackathon/Noirhack 25/trulens/circuits/src/main.nr"}},"names":["main"]}