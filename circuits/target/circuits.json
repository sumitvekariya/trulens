{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":16898886639187659031,"abi":{"parameters":[{"name":"verifier_image_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"min_timestamp_bound","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"max_timestamp_bound","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"min_latitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"max_latitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"min_longitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"max_longitude_bound","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"signed_image_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"image_signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"latitude","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"longitude","type":{"kind":"integer","sign":"signed","width":64},"visibility":"private"},{"name":"gps_enabled_bool","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"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","debug_symbols":"nZvBatxIFEX/RWsvVO++eqryrwzD0EmcwWDaIXYGBpN/j5zEXqRlzLlLtfps7r21OBJ6Wj7dfPj27z+358/3D8v1X0/L3f3H0+Pt/Xm/elqaxs8fH76czs/XD4+nr4/Lda+4Wm7On5brWuP71fL59u5muc7x/e+rHZkYyZUjjSPBEXEkOdI5UhzZOMLbT95+5+133n7n7Xfefuftd95+5+133n7n7XfefvH2i7dfvP3i7Rdvv3j7xdsv3n7x9ou3vx22v438jYx1u0AaR4Ij4khypHOkOLJxZGBk8CoHr3LwKgfvZfBeBu9lGCFPjEzey+QhT35eJu9l8pAnH//EvcS6cqRxJDiSHOkcKY4YIePxR+O9NB5yE0d4L42H3DaO8F6Chxx8/MF7CR5y8PEH7yWMkPn4xXsRD1l8/OK9iIcsPn7xXpKHnHz8yXtJHnLy8SfvJY2Q+fg776XzkDsff+e9dB5y5+PvvJfiIRcff/FeiodcfPzFeykjZD5+rtXBHTm4Iwd35ODCG1x4gwtvcOENLrzBhTe48AYX3uDCG8MImY+fC29w4Q0uvMGFN7jwBhfe4MIrLrziwisuvOLCKy684sKr1QgZj19ceMWFV1x4xYVXXHjFhVdceMWFV1x4xYVXXHjFhVdceBVGyHz8XHjFhVdceMWFV1x4xYVXXHjFhVdceMWFV1x4xYVXXHiVRsh8/Fx4xYVXXHjFhVdceMWFV1x4xYVXXHjFhVdceMWFV1x4VUbIfPxceMWFV1x4xYVXXHjFhVdceMWFV1x4xYVXXHjFhVdceDWMkPn4ufCKC6+48IoLr7jwiguvuPAmF97kwptceJMLb3LhTS68uRoh4/EnF97kwptceJMLb3LhTS68yYU3ufAmF97kwpvHwjtqvCDbuEAOxz/n+htpa8QFUwazGcwwmMMz01bVK1QXIRyb8ntQc6BwoMPj1qK1F2h/iXoBpQN1ByoH2hxoONA0oGOtfw9qDhQO5CwinUWks4h0FpFvLCJfj8b+8usCGg40DaivDtQcKBxIDpQO1B2oHMhZRHcW0Z1FlLOI4+cfbX/r8gLtDy4voHAgOVA6UHegcqDNgYYDTQM6fu7yHuQsYnMWsTmL2JxFbG8sIuMV2vICKgfaHGg40DSgsTpQc6BwIDlQOpCziOEsYjiLGM4ixhuLmK/Qrr1/QnN1oOZA4UByoHSg7kBFof3iv9PX29OHu5vnj3if7307f3z5pne/fPz/y687+39/AA==","file_map":{"48":{"source":"fn main(\n    // Public inputs\n    verifier_image_hash: [u8; 32],\n    min_timestamp_bound: u64,\n    max_timestamp_bound: u64,\n    min_latitude_bound: i64,\n    max_latitude_bound: i64,\n    min_longitude_bound: i64,\n    max_longitude_bound: i64,\n    \n    // Private inputs\n    signed_image_hash: [u8; 32],\n    image_signature: [u8; 64],\n    timestamp: u64,\n    latitude: i64,\n    longitude: i64,\n    gps_enabled_bool: bool\n) {\n    // 1. Verify that the image hash matches what the verifier expects\n    // This ensures the image hasn't been tampered with\n    assert(signed_image_hash == verifier_image_hash);\n    \n    // 2. Verify that the signature is valid\n    // Simple signature check - at least ensure it's not all zeros\n    let mut all_zeros = true;\n    for i in 0..64 {\n        if image_signature[i] != 0 {\n            all_zeros = false;\n        }\n    }\n    assert(!all_zeros);\n    \n    // 3. Verify timestamp bounds - ensure the image was taken within the expected timeframe\n    assert(timestamp >= min_timestamp_bound);\n    assert(timestamp <= max_timestamp_bound);\n    \n    // 4. If GPS is enabled, verify that the location is within the expected bounds\n    if gps_enabled_bool {\n        let lat_valid = (latitude >= min_latitude_bound) & (latitude <= max_latitude_bound);\n        let long_valid = (longitude >= min_longitude_bound) & (longitude <= max_longitude_bound);\n        assert(lat_valid & long_valid);\n    }\n}\n\n#[test]\nfn test_main_with_gps() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let mut image_signature = [0; 64];\n    image_signature[0] = 1; // Make sure signature isn't all zeros\n    \n    // Test with GPS enabled\n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        150, // timestamp within bounds\n        15,  // latitude within bounds\n        35,  // longitude within bounds\n        true // GPS enabled\n    );\n}\n\n#[test]\nfn test_main_without_gps() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let mut image_signature = [0; 64];\n    image_signature[0] = 1; // Make sure signature isn't all zeros\n    \n    // Test with GPS disabled - latitude and longitude can be any values\n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        150, // timestamp within bounds\n        0,   // latitude doesn't matter\n        0,   // longitude doesn't matter\n        false // GPS disabled\n    );\n}\n\n// Additional test that should fail - timestamp out of bounds\n#[test(should_fail)]\nfn test_timestamp_out_of_bounds() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let mut image_signature = [0; 64];\n    image_signature[0] = 1;\n    \n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        300, // timestamp OUT OF BOUNDS\n        15,  // latitude within bounds\n        35,  // longitude within bounds\n        true // GPS enabled\n    );\n}\n\n// Additional test that should fail - GPS coordinates out of bounds\n#[test(should_fail)]\nfn test_gps_out_of_bounds() {\n    // Mock values\n    let verifier_image_hash = [0; 32];\n    let signed_image_hash = [0; 32];\n    let mut image_signature = [0; 64];\n    image_signature[0] = 1;\n    \n    main(\n        verifier_image_hash,\n        100, // min_timestamp\n        200, // max_timestamp\n        10,  // min_latitude\n        20,  // max_latitude\n        30,  // min_longitude\n        40,  // max_longitude\n        signed_image_hash,\n        image_signature,\n        150, // timestamp within bounds\n        5,   // latitude OUT OF BOUNDS\n        35,  // longitude within bounds\n        true // GPS enabled\n    );\n}\n","path":"/Users/sarkazein./Documents/Personal/Hackathon/Noirhack 25/trulens/circuits/src/main.nr"}},"names":["main"]}